#!/usr/bin/python

import subprocess
import sys
import os
from pathlib import Path
from turtle import pos

CONFIG = f'{Path(__file__).resolve().parent}/config.txt'

def get_possible_masters():
    possible = set([ 'develop', 'master', 'main' ])
    if os.path.exists(CONFIG):
        with open(CONFIG) as f:
            possible.update([l.strip() for l in f.readlines()])
    return possible

def add_possible_master(branch):
    possible = get_possible_masters()
    possible.update([branch])
    with open(CONFIG, 'w') as f:
        for branch in possible:
            f.write(f'{branch}\n')

def git_output(args):
    result = subprocess.run(['git', *args], stdout=subprocess.PIPE)
    return result.stdout.decode('utf-8')

def branch_exists(branch_name):
    for branch in git_output(['branch', '--list', '--remote']).splitlines():
        branch = branch.strip()
        if not branch.startswith('origin/'): continue
        if branch == f'origin/{branch_name}': return True
    return False

def get_merged_branches(master_branch):
    output = git_output([
        'for-each-ref',
        '--merged',
        f'origin/{master_branch}',
        '--format',
        '%(refname:short)',
        'refs/heads'])
    branches = output.split('\n')

    for branch in branches:
        if not branch:
            continue

        # Don't delete master branch.
        if branch == master_branch:
            continue

        yield branch

def delete_branch(branch):
    git_output(['branch', '-D', branch])
    
def run(dry_run=True):
    merged_branches = set()

    possible_masters = get_possible_masters()
    for branch in possible_masters:
        if not branch_exists(branch): continue

        merged_branches.update(get_merged_branches(branch))

    for branch in merged_branches:
        if branch in possible_masters: continue
        if not dry_run:
            delete_branch(branch)
        print(f'Deleted {branch}')

    if dry_run:
        print('This was a dry run. Use --force or -F to actually delete branches')

def should_actually_delete():
    return '--force' in sys.argv or '-F' in sys.argv

if __name__ == "__main__":
    # Handle potentially adding a merge target.
    try:
        add_index = sys.argv.index('--add')
        if add_index != -1:
            branch = sys.argv[add_index + 1]
            add_possible_master(branch)        
    except:
        dry_run = not should_actually_delete()
        run(dry_run)