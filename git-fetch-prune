#!/usr/bin/python

import subprocess
import sys

def git_output(args):
    result = subprocess.run(['git', *args], stdout=subprocess.PIPE)
    return result.stdout.decode('utf-8')

def get_master_branch():
    possible_masters = [ 'develop', 'master', 'main' ]

    for branch in git_output(['branch', '--list']).splitlines():
        branch = branch.strip()
        if branch in possible_masters:
            return branch

    return 'master'

def get_merged_branches(master_branch):
    output = git_output([
        'for-each-ref',
        '--merged',
        f'origin/{master_branch}',
        '--format',
        '%(refname:short)',
        'refs/heads'])
    branches = output.split('\n')

    for branch in branches:
        if not branch:
            continue

        # Don't delete master branch.
        if branch == master_branch:
            continue

        yield branch

def delete_branch(branch):
    git_output(['branch', '-D', branch])
    
def run(dry_run=True):
    master_branch = get_master_branch()
    merged_branches = get_merged_branches(master_branch)

    for branch in merged_branches:
        if not dry_run:
            delete_branch(branch)
        print(f'Deleted {branch}')

    if dry_run:
        print('This was a dry run. Use --force or -F to actually delete branches')

def should_actually_delete():
    return '--force' in sys.argv or '-F' in sys.argv

if __name__ == "__main__":
    dry_run = not should_actually_delete()
    run(dry_run)